library(tidyverse)
random_values <- c(500:100)
random_sample <- sample(random_values,12)
random_sample
col.pal = c(Freebayes="red",Lofreq="green",Varscan="blue",BreseQ="grey")
check <- matrix(random_sample,nrow=4,
dimnames = list(c("Freebayes","Lofreq","Varscan", "BreseQ"),
c("breseq","BWA","Minimap")))
chordDiagram(check,grid.col = col.pal)
library(circlize)
library(tidyverse)
random_values <- c(500:100)
random_sample <- sample(random_values,12)
random_sample
col.pal = c(Freebayes="red",Lofreq="green",Varscan="blue",BreseQ="grey")
check <- matrix(random_sample,nrow=4,
dimnames = list(c("Freebayes","Lofreq","Varscan", "BreseQ"),
c("breseq","BWA","Minimap")))
chordDiagram(check,grid.col = col.pal)
# make the plot more beautiful
library(circlize)
circos.clear()
circos.initialize(factors=c("pb_501_001", "pb_501_002", "pb_501_003"),
xlim=matrix(c(rep(0, 3), ref$V2), ncol=2))
split = factor(split, levels = letters[1:5])
# make the plot more beautiful
set.seed(123)
mat1 = rbind(cbind(matrix(rnorm(50*5, mean = 1), nr = 50),
matrix(rnorm(50*5, mean = -1), nr = 50)),
cbind(matrix(rnorm(50*5, mean = -1), nr = 50),
matrix(rnorm(50*5, mean = 1), nr = 50))
)
rownames(mat1) = paste0("R", 1:100)
colnames(mat1) = paste0("C", 1:10)
mat1 = mat1[sample(100, 100), ] # randomly permute rows
split = sample(letters[1:5], 100, replace = TRUE)
split = factor(split, levels = letters[1:5])
library(ComplexHeatmap)
Heatmap(mat1, row_split = split)
library(ComplexHeatmap)
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
Heatmap(mat1, row_split = split)
col_fun1 = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
col_fun1
circos.heatmap(mat1, split = split, col = col_fun1)
Heatmap(mat1, row_split = split)
circos.heatmap(mat1, split = split, col = col_fun1)
col_fun1 = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
circos.heatmap(mat1, split = split, col = col_fun1)
library(ComplexHeatmap)
Heatmap(mat1, row_split = split)
col_fun1 = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
circos.heatmap(mat1, split = split, col = col_fun1)
circos.heatmap(mat1, split = split, col = col_fun1)
Heatmap(mat1, row_split = split)
col_fun1 = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
circos.heatmap(mat1, split = split, col = col_fun1)
# make the plot more beautiful
set.seed(123)
mat1 = rbind(cbind(matrix(rnorm(50*5, mean = 1), nr = 50),
matrix(rnorm(50*5, mean = -1), nr = 50)),
cbind(matrix(rnorm(50*5, mean = -1), nr = 50),
matrix(rnorm(50*5, mean = 1), nr = 50))
)
rownames(mat1) = paste0("R", 1:100)
colnames(mat1) = paste0("C", 1:10)
mat1 = mat1[sample(100, 100), ] # randomly permute rows
split = sample(letters[1:5], 100, replace = TRUE)
split = factor(split, levels = letters[1:5])
library(ComplexHeatmap)
Heatmap(mat1, row_split = split)
col_fun1 = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
circos.heatmap(mat1, split = split, col = col_fun1)
circos.par(start.degree = 90, gap.degree = 10)
circos.heatmap(mat1, split = split, col = col_fun1, track.height = 0.4,
bg.border = "green", bg.lwd = 2, bg.lty = 2, show.sector.labels = TRUE)
library(circlize)
library(tidyverse)
random_values <- c(500:100)
random_sample <- sample(random_values,12)
random_sample
col.pal = c(Freebayes="red",Lofreq="green",Varscan="blue",BreseQ="grey")
check <- matrix(random_sample,nrow=4,
dimnames = list(c("Freebayes","Lofreq","Varscan", "BreseQ"),
c("breseq","BWA","Minimap")))
chordDiagram(check,grid.col = col.pal)
# make the plot more beautiful
set.seed(123)
mat1 = rbind(cbind(matrix(rnorm(50*5, mean = 1), nr = 50),
matrix(rnorm(50*5, mean = -1), nr = 50)),
cbind(matrix(rnorm(50*5, mean = -1), nr = 50),
matrix(rnorm(50*5, mean = 1), nr = 50))
)
rownames(mat1) = paste0("R", 1:100)
colnames(mat1) = paste0("C", 1:10)
mat1 = mat1[sample(100, 100), ] # randomly permute rows
split = sample(letters[1:5], 100, replace = TRUE)
split = factor(split, levels = letters[1:5])
library(ComplexHeatmap)
Heatmap(mat1, row_split = split)
col_fun1 = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
circos.heatmap(mat1, split = split, col = col_fun1)
circos.par(start.degree = 90, gap.degree = 10)
circos.heatmap(mat1, split = split, col = col_fun1, track.height = 0.4,
bg.border = "green", bg.lwd = 2, bg.lty = 2, show.sector.labels = TRUE)
# make the plot more beautiful
set.seed(123)
mat1 = rbind(cbind(matrix(rnorm(50*5, mean = 1), nr = 50),
matrix(rnorm(50*5, mean = -1), nr = 50)),
cbind(matrix(rnorm(50*5, mean = -1), nr = 50),
matrix(rnorm(50*5, mean = 1), nr = 50))
)
rownames(mat1) = paste0("R", 1:100)
colnames(mat1) = paste0("C", 1:10)
mat1 = mat1[sample(100, 100), ] # randomly permute rows
split = sample(letters[1:5], 100, replace = TRUE)
split = factor(split, levels = letters[1:5])
library(ComplexHeatmap)
Heatmap(mat1, row_split = split)
col_fun1 = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
circos.heatmap(mat1, split = split, col = col_fun1)
circos.heatmap(mat1, split = split, col = col_fun1)
circos.par(start.degree = 90, gap.degree = 10)
circos.heatmap(mat1, split = split, col = col_fun1, track.height = 0.4,
bg.border = "green", bg.lwd = 2, bg.lty = 2, show.sector.labels = TRUE)
circos.clear()
col_fun1 = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
circos.heatmap(mat1, split = split, col = col_fun1)
circos.par(start.degree = 90, gap.degree = 10)
circos.clear()
circos.par(start.degree = 90, gap.degree = 10)
circos.heatmap(mat1, split = split, col = col_fun1, track.height = 0.4,
bg.border = "green", bg.lwd = 2, bg.lty = 2, show.sector.labels = TRUE)
circos.clear()
circos.heatmap(mat1, split = factor(split, levels = c("e", "d", "c", "b", "a")),
col = col_fun1, show.sector.labels = TRUE)
circos.initialize()
set.seed(999)
n = 1000
df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
df
df = data.frame(sectors = sample(letters[1], n, replace = TRUE),
x = rnorm(n), y = runif(n))
df
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
circos.initialize()
circos.initialize(df$sectors, x = df$x)
df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
df
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
circos.track(df$sectors, y = df$y,
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter,
CELL_META$cell.ylim[2] + mm_y(5),
CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
df = data.frame(sectors = sample(letters[1], n, replace = TRUE),
x = rnorm(n), y = runif(n))
df
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
circos.track(df$sectors, y = df$y,
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter,
CELL_META$cell.ylim[2] + mm_y(5),
CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$sectors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
df
df = data.frame(sectors = sample(letters[1], n, replace = TRUE),
x = rnorm(n), y = seq(0,6000000,1000))
df = data.frame(sectors = sample(letters[1], n, replace = TRUE),
x = rnorm(n), y = seq(1,6000000,1000))
df
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
circos.track(df$sectors, y = df$y,
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter,
CELL_META$cell.ylim[2] + mm_y(5),
CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
library(ggplot2)
library(tidyverse)
library(scales)
library(ggforce)
x1=seq(0,6000000,1000)
y1=rep(1.1,length(x1))
y2=rep(1.5,length(x1))
data2=as.data.frame(cbind(x1,y1,y2))
##
points= data.frame(mutations=c(0,5000000,10,1000000),check=c(1.5,1.5,1.1,1.1), type=c("indel","insertion"),
genome=c("leaky","leaky", "ANC", "ANC"), gene=c("wssE","wssA","pvdI","pvdII"))
points
# organise and finsih plot to show it to Carsten
ggplot() +
geom_rect(xmin=0, xmax=6000000, ymin= 1.1, ymax=1.5, fill="#eae3dc") +
geom_line(data=data2,aes(x1,y1), color="#333333",size=1) +
geom_line(data=data2,aes(x1,y2), color="#333333",size=1.5) +
geom_point(data=points,aes(mutations,check, shape=type), size=5) +
scale_shape_manual(values = c(15,18), name="Type of muatations") +
coord_polar() +
ylim(c(0,NA)) +
annotate(geom="text", x=5500000, y=1.25, label="Ancestor", fontface=2, size=5, color="#666666") +
annotate(geom="text", x=5500000, y=1.65, label="Leaky", fontface=2,size=5,color="#666666") +
ggrepel::geom_label_repel(data=points, aes(mutations,check,label=gene),
box.padding = 0.5,
min.segment.length = 0,
nudge_x = .15,
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20) +
labs(title="Differences between colonies") +
theme_void() +
# theme(plot.title = element_text(hjust=0.5, face="bold", size = 20),
#       panel.grid = element_blank(),
#       axis.text.x= element_text(color="#333333", size=14),
#       plot.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      panel.background = element_rect(fill ="#eae3dc", color=  "#eae3dc"),
#      axis.text.y=element_blank(),axis.ticks=element_blank(),
#      legend.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.key  = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.position = "bottom") +
scale_x_continuous(breaks = seq(0,5000000,1000000), limits=c(0,6000000),
labels = unit_format(unit = "MB", scale = 1e-6)) +
annotate(geom="text", x=0, y=0, label="Pseudomonas fluorescens SBW25",
fontface="bold.italic",size=4,color="gray") +
labs(x="",y="") +
geom_text(data = ticks, aes(x, y, label = "|", angle = angle))
ticks <- data.frame(
x=seq(0,6000000,500000),
y=rep(1,13),
angle=360000-seq(0,360,30)
)
# organise and finsih plot to show it to Carsten
ggplot() +
geom_rect(xmin=0, xmax=6000000, ymin= 1.1, ymax=1.5, fill="#eae3dc") +
geom_line(data=data2,aes(x1,y1), color="#333333",size=1) +
geom_line(data=data2,aes(x1,y2), color="#333333",size=1.5) +
geom_point(data=points,aes(mutations,check, shape=type), size=5) +
scale_shape_manual(values = c(15,18), name="Type of muatations") +
coord_polar() +
ylim(c(0,NA)) +
annotate(geom="text", x=5500000, y=1.25, label="Ancestor", fontface=2, size=5, color="#666666") +
annotate(geom="text", x=5500000, y=1.65, label="Leaky", fontface=2,size=5,color="#666666") +
ggrepel::geom_label_repel(data=points, aes(mutations,check,label=gene),
box.padding = 0.5,
min.segment.length = 0,
nudge_x = .15,
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20) +
labs(title="Differences between colonies") +
theme_void() +
# theme(plot.title = element_text(hjust=0.5, face="bold", size = 20),
#       panel.grid = element_blank(),
#       axis.text.x= element_text(color="#333333", size=14),
#       plot.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      panel.background = element_rect(fill ="#eae3dc", color=  "#eae3dc"),
#      axis.text.y=element_blank(),axis.ticks=element_blank(),
#      legend.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.key  = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.position = "bottom") +
scale_x_continuous(breaks = seq(0,5000000,1000000), limits=c(0,6000000),
labels = unit_format(unit = "MB", scale = 1e-6)) +
annotate(geom="text", x=0, y=0, label="Pseudomonas fluorescens SBW25",
fontface="bold.italic",size=4,color="gray") +
labs(x="",y="") +
geom_text(data = ticks, aes(x, y, label = "|", angle = angle))
ggplot() +
geom_line(data=data2,aes(x1,1.8), color="#333333",size=1) +
geom_text(data = ticks, aes(x, y, label = "|", angle = angle)) +
coord_polar() +
ylim(0,NA)
ggplot() +
geom_line(data=data2,aes(x1,1.8), color="#333333",size=1) +
geom_text(data = ticks, aes(x, y, label = "|", angle = angle)) +
coord_polar() +
ylim(0,NA)
library(tidyverse)
library(scales)
library(ggforce)
x1=seq(0,6000000,1000)
y1=rep(1.1,length(x1))
y2=rep(1.5,length(x1))
data2=as.data.frame(cbind(x1,y1,y2))
##
points= data.frame(mutations=c(0,5000000,10,1000000),check=c(1.5,1.5,1.1,1.1), type=c("indel","insertion"),
genome=c("leaky","leaky", "ANC", "ANC"), gene=c("wssE","wssA","pvdI","pvdII"))
points
ticks <- data.frame(
x=seq(0,6000000,500000),
y=rep(1,13),
angle=360000-seq(0,360,30)
)
# organise and finsih plot to show it to Carsten
ggplot() +
geom_rect(xmin=0, xmax=6000000, ymin= 1.1, ymax=1.5, fill="#eae3dc") +
geom_line(data=data2,aes(x1,y1), color="#333333",size=1) +
geom_line(data=data2,aes(x1,y2), color="#333333",size=1.5) +
geom_point(data=points,aes(mutations,check, shape=type), size=5) +
scale_shape_manual(values = c(15,18), name="Type of muatations") +
coord_polar() +
ylim(c(0,NA)) +
annotate(geom="text", x=5500000, y=1.25, label="Ancestor", fontface=2, size=5, color="#666666") +
annotate(geom="text", x=5500000, y=1.65, label="Leaky", fontface=2,size=5,color="#666666") +
ggrepel::geom_label_repel(data=points, aes(mutations,check,label=gene),
box.padding = 0.5,
min.segment.length = 0,
nudge_x = .15,
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20) +
labs(title="Differences between colonies") +
theme_void() +
# theme(plot.title = element_text(hjust=0.5, face="bold", size = 20),
#       panel.grid = element_blank(),
#       axis.text.x= element_text(color="#333333", size=14),
#       plot.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      panel.background = element_rect(fill ="#eae3dc", color=  "#eae3dc"),
#      axis.text.y=element_blank(),axis.ticks=element_blank(),
#      legend.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.key  = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.position = "bottom") +
scale_x_continuous(breaks = seq(0,5000000,1000000), limits=c(0,6000000),
labels = unit_format(unit = "MB", scale = 1e-6)) +
annotate(geom="text", x=0, y=0, label="Pseudomonas fluorescens SBW25",
fontface="bold.italic",size=4,color="gray") +
labs(x="",y="") +
geom_text(data = ticks, aes(x, y, label = "|", angle = angle))
##
points= data.frame(mutations=c(0,5000000,10,1000000),check=c(1.7,1.7,1.3,1.3), type=c("indel","insertion"),
genome=c("leaky","leaky", "ANC", "ANC"), gene=c("wssE","wssA","pvdI","pvdII"))
points
ticks <- data.frame(
x=seq(0,6000000,500000),
y=rep(1,13),
angle=360000-seq(0,360,30)
)
# organise and finsih plot to show it to Carsten
ggplot() +
geom_rect(xmin=0, xmax=6000000, ymin= 1.1, ymax=1.5, fill="#eae3dc") +
geom_line(data=data2,aes(x1,y1), color="#333333",size=1) +
geom_line(data=data2,aes(x1,y2), color="#333333",size=1.5) +
geom_point(data=points,aes(mutations,check, shape=type), size=5) +
scale_shape_manual(values = c(15,18), name="Type of muatations") +
coord_polar() +
ylim(c(0,NA)) +
annotate(geom="text", x=5500000, y=1.25, label="Ancestor", fontface=2, size=5, color="#666666") +
annotate(geom="text", x=5500000, y=1.65, label="Leaky", fontface=2,size=5,color="#666666") +
ggrepel::geom_label_repel(data=points, aes(mutations,check,label=gene),
box.padding = 0.5,
min.segment.length = 0,
nudge_x = .15,
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20) +
labs(title="Differences between colonies") +
theme_void() +
# theme(plot.title = element_text(hjust=0.5, face="bold", size = 20),
#       panel.grid = element_blank(),
#       axis.text.x= element_text(color="#333333", size=14),
#       plot.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      panel.background = element_rect(fill ="#eae3dc", color=  "#eae3dc"),
#      axis.text.y=element_blank(),axis.ticks=element_blank(),
#      legend.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.key  = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.position = "bottom") +
scale_x_continuous(breaks = seq(0,5000000,1000000), limits=c(0,6000000),
labels = unit_format(unit = "MB", scale = 1e-6)) +
annotate(geom="text", x=0, y=0, label="Pseudomonas fluorescens SBW25",
fontface="bold.italic",size=4,color="gray") +
labs(x="",y="") +
geom_text(data = ticks, aes(x, y, label = "|", angle = angle))
install.packages('BioCircos')
library('BioCircos')
myGenome = list("A" = 6000000)
BioCircos(genome = myGenome, genomeFillColor = c("tomato2", "darkblue"),
genomeTicksScale = 4e+3)
BioCircos(genome = myGenome, yChr = FALSE, genomeFillColor = "Reds", chrPad = 0,
displayGenomeBorder = FALSE, genomeTicksDisplay = FALSE, genomeLabelDy = 0)
tracklist = BioCircosTextTrack('myTextTrack', 'Some text', size = "2em", opacity = 0.5,
x = -0.67, y = -0.5)
BioCircos(tracklist, genomeFillColor = "PuOr",
chrPad = 0, displayGenomeBorder = FALSE,
genomeTicksLen = 2, genomeTicksTextSize = 0, genomeTicksScale = 1e+8,
genomeLabelTextSize = "9pt", genomeLabelDy = 0)
tracklist = BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.5, maxRadius = 0.8,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#FFBBBB")
BioCircos(tracklist, genomeFillColor = "PuOr",
chrPad = 0.05, displayGenomeBorder = FALSE,
genomeTicksDisplay = FALSE,  genomeLabelTextSize = "9pt", genomeLabelDy = 0)
BioCircos(genome = myGenome, yChr = FALSE, genomeFillColor = "Reds", chrPad = 0,
displayGenomeBorder = FALSE, genomeTicksDisplay = FALSE, genomeLabelDy = 0)
tracklist = BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.5, maxRadius = 0.8,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#FFBBBB")
BioCircos(tracklist, genomeFillColor = "PuOr",
chrPad = 0.05, displayGenomeBorder = FALSE,
genomeTicksDisplay = FALSE,  genomeLabelTextSize = "9pt", genomeLabelDy = 0)
myBackgroundTrack = list("B"=6000000)
tracklist = BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.5, maxRadius = 0.8,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#FFBBBB")
BioCircos(tracklist, genomeFillColor = "PuOr",
chrPad = 0.05, displayGenomeBorder = FALSE,
genomeTicksDisplay = FALSE,  genomeLabelTextSize = "9pt", genomeLabelDy = 0)
check = list("B"=6000000)
BioCircos(genome = myGenome, yChr = FALSE, genomeFillColor = "Reds", chrPad = 0,
displayGenomeBorder = FALSE, genomeTicksDisplay = FALSE, genomeLabelDy = 0)
tracklist = BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.5, maxRadius = 0.8,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#FFBBBB")
BioCircos(tracklist, genomeFillColor = "PuOr",
chrPad = 0.05, displayGenomeBorder = FALSE,
genomeTicksDisplay = FALSE,  genomeLabelTextSize = "9pt", genomeLabelDy = 0)
random_values <- c(500:100)
random_sample <- sample(random_values,12)
random_sample
col.pal = c(Freebayes="red",Lofreq="green",Varscan="blue",BreseQ="grey")
check <- matrix(random_sample,nrow=4,
dimnames = list(c("Freebayes","Lofreq","Varscan", "BreseQ"),
c("breseq","BWA","Minimap")))
chordDiagram(check,grid.col = col.pal)
check
