<<<<<<< HEAD
y2=rep(0.6,12),
x2=paste0((seq(0,5.5,0.5))),
angle=360000-seq(0,330,30)
)
=======
df
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
circos.track(df$sectors, y = df$y,
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter,
CELL_META$cell.ylim[2] + mm_y(5),
CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
df = data.frame(sectors = sample(letters[1], n, replace = TRUE),
x = rnorm(n), y = runif(n))
df
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
circos.track(df$sectors, y = df$y,
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter,
CELL_META$cell.ylim[2] + mm_y(5),
CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$sectors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
df
df = data.frame(sectors = sample(letters[1], n, replace = TRUE),
x = rnorm(n), y = seq(0,6000000,1000))
df = data.frame(sectors = sample(letters[1], n, replace = TRUE),
x = rnorm(n), y = seq(1,6000000,1000))
df
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
circos.track(df$sectors, y = df$y,
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter,
CELL_META$cell.ylim[2] + mm_y(5),
CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
library(ggplot2)
library(tidyverse)
library(scales)
library(ggforce)
x1=seq(0,6000000,1000)
y1=rep(1.1,length(x1))
y2=rep(1.5,length(x1))
data2=as.data.frame(cbind(x1,y1,y2))
##
points= data.frame(mutations=c(0,5000000,10,1000000),check=c(1.5,1.5,1.1,1.1), type=c("indel","insertion"),
genome=c("leaky","leaky", "ANC", "ANC"), gene=c("wssE","wssA","pvdI","pvdII"))
points
# organise and finsih plot to show it to Carsten
>>>>>>> 7e8fbd37c0568f3785de6e949aa12159fdcba29e
ggplot() +
geom_rect(xmin=0, xmax=6000000, ymin= 1.1, ymax=1.5, fill="#eae3dc") +
geom_line(data=data2,aes(x1,y1), color="#333333",size=1) +
geom_line(data=data2,aes(x1,y2), color="#333333",size=1.5) +
geom_point(data=points,aes(mutations,check, shape=type), size=5) +
scale_shape_manual(values = c(15,18), name="Type of muatations") +
coord_polar() +
ylim(c(0,NA)) +
annotate(geom="text", x=5500000, y=1.25, label="Ancestor", fontface=2, size=5, color="#666666") +
annotate(geom="text", x=5500000, y=1.65, label="Leaky", fontface=2,size=5,color="#666666") +
ggrepel::geom_label_repel(data=points, aes(mutations,check,label=gene),
box.padding = 0.5,
min.segment.length = 0,
nudge_x = .15,
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20) +
labs(title="Differences between colonies") +
theme_void() +
# theme(plot.title = element_text(hjust=0.5, face="bold", size = 20),
#       panel.grid = element_blank(),
#       axis.text.x= element_text(color="#333333", size=14),
#       plot.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      panel.background = element_rect(fill ="#eae3dc", color=  "#eae3dc"),
#      axis.text.y=element_blank(),axis.ticks=element_blank(),
#      legend.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.key  = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.position = "bottom") +
scale_x_continuous(breaks = seq(0,5000000,1000000), limits=c(0,6000000),
labels = unit_format(unit = "MB", scale = 1e-6)) +
annotate(geom="text", x=0, y=0, label="Pseudomonas fluorescens SBW25",
fontface="bold.italic",size=4,color="gray") +
labs(x="",y="") +
geom_text(data = ticks, aes(x, y, label = "|", angle = angle))
ticks <- data.frame(
x=seq(0,6000000,500000),
y=rep(1,13),
angle=360000-seq(0,360,30)
)
# organise and finsih plot to show it to Carsten
ggplot() +
geom_rect(xmin=0, xmax=6000000, ymin= 1.1, ymax=1.5, fill="#eae3dc") +
geom_line(data=data2,aes(x1,y1), color="#333333",size=1) +
geom_line(data=data2,aes(x1,y2), color="#333333",size=1.5) +
geom_point(data=points,aes(mutations,check, shape=type), size=5) +
scale_shape_manual(values = c(15,18), name="Type of muatations") +
coord_polar() +
ylim(c(0,NA)) +
annotate(geom="text", x=5500000, y=1.25, label="Ancestor", fontface=2, size=5, color="#666666") +
annotate(geom="text", x=5500000, y=1.65, label="Leaky", fontface=2,size=5,color="#666666") +
ggrepel::geom_label_repel(data=points, aes(mutations,check,label=gene),
box.padding = 0.5,
min.segment.length = 0,
nudge_x = .15,
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20) +
labs(title="Differences between colonies") +
theme_void() +
# theme(plot.title = element_text(hjust=0.5, face="bold", size = 20),
#       panel.grid = element_blank(),
#       axis.text.x= element_text(color="#333333", size=14),
#       plot.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      panel.background = element_rect(fill ="#eae3dc", color=  "#eae3dc"),
#      axis.text.y=element_blank(),axis.ticks=element_blank(),
#      legend.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.key  = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.position = "bottom") +
scale_x_continuous(breaks = seq(0,5000000,1000000), limits=c(0,6000000),
labels = unit_format(unit = "MB", scale = 1e-6)) +
annotate(geom="text", x=0, y=0, label="Pseudomonas fluorescens SBW25",
fontface="bold.italic",size=4,color="gray") +
labs(x="",y="") +
geom_text(data = ticks, aes(x, y, label = "|", angle = angle))
ggplot() +
geom_line(data=data2,aes(x1,1.8), color="#333333",size=1) +
geom_text(data = ticks, aes(x, y, label = "|", angle = angle)) +
coord_polar() +
ylim(0,NA)
ggplot() +
geom_line(data=data2,aes(x1,1.8), color="#333333",size=1) +
geom_text(data = ticks, aes(x, y, label = "|", angle = angle)) +
coord_polar() +
ylim(0,NA)
library(tidyverse)
library(scales)
library(ggforce)
x1=seq(0,6000000,1000)
y1=rep(1.1,length(x1))
y2=rep(1.5,length(x1))
data2=as.data.frame(cbind(x1,y1,y2))
##
points= data.frame(mutations=c(0,5000000,10,1000000),check=c(1.5,1.5,1.1,1.1), type=c("indel","insertion"),
genome=c("leaky","leaky", "ANC", "ANC"), gene=c("wssE","wssA","pvdI","pvdII"))
points
ticks <- data.frame(
x=seq(0,6000000,500000),
y=rep(1,13),
angle=360000-seq(0,360,30)
)
# organise and finsih plot to show it to Carsten
ggplot() +
geom_rect(xmin=0, xmax=6000000, ymin= 1.1, ymax=1.5, fill="#eae3dc") +
geom_line(data=data2,aes(x1,y1), color="#333333",size=1) +
geom_line(data=data2,aes(x1,y2), color="#333333",size=1.5) +
geom_point(data=points,aes(mutations,check, shape=type), size=5) +
scale_shape_manual(values = c(15,18), name="Type of muatations") +
coord_polar() +
ylim(c(0,NA)) +
annotate(geom="text", x=5500000, y=1.25, label="Ancestor", fontface=2, size=5, color="#666666") +
annotate(geom="text", x=5500000, y=1.65, label="Leaky", fontface=2,size=5,color="#666666") +
ggrepel::geom_label_repel(data=points, aes(mutations,check,label=gene),
box.padding = 0.5,
min.segment.length = 0,
nudge_x = .15,
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20) +
labs(title="Differences between colonies") +
theme_void() +
# theme(plot.title = element_text(hjust=0.5, face="bold", size = 20),
#       panel.grid = element_blank(),
#       axis.text.x= element_text(color="#333333", size=14),
#       plot.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      panel.background = element_rect(fill ="#eae3dc", color=  "#eae3dc"),
#      axis.text.y=element_blank(),axis.ticks=element_blank(),
#      legend.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.key  = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.position = "bottom") +
scale_x_continuous(breaks = seq(0,5000000,1000000), limits=c(0,6000000),
labels = unit_format(unit = "MB", scale = 1e-6)) +
annotate(geom="text", x=0, y=0, label="Pseudomonas fluorescens SBW25",
fontface="bold.italic",size=4,color="gray") +
labs(x="",y="") +
geom_text(data = ticks, aes(x, y, label = "|", angle = angle))
##
points= data.frame(mutations=c(0,5000000,10,1000000),check=c(1.7,1.7,1.3,1.3), type=c("indel","insertion"),
genome=c("leaky","leaky", "ANC", "ANC"), gene=c("wssE","wssA","pvdI","pvdII"))
points
ticks <- data.frame(
x=seq(0,6000000,500000),
y=rep(1,13),
angle=360000-seq(0,360,30)
)
# organise and finsih plot to show it to Carsten
ggplot() +
geom_rect(xmin=0, xmax=6000000, ymin= 1.1, ymax=1.5, fill="#eae3dc") +
geom_line(data=data2,aes(x1,y1), color="#333333",size=1) +
geom_line(data=data2,aes(x1,y2), color="#333333",size=1.5) +
geom_point(data=points,aes(mutations,check, shape=type), size=5) +
scale_shape_manual(values = c(15,18), name="Type of muatations") +
coord_polar() +
ylim(c(0,NA)) +
annotate(geom="text", x=5500000, y=1.25, label="Ancestor", fontface=2, size=5, color="#666666") +
annotate(geom="text", x=5500000, y=1.65, label="Leaky", fontface=2,size=5,color="#666666") +
ggrepel::geom_label_repel(data=points, aes(mutations,check,label=gene),
box.padding = 0.5,
min.segment.length = 0,
nudge_x = .15,
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20) +
labs(title="Differences between colonies") +
theme_void() +
# theme(plot.title = element_text(hjust=0.5, face="bold", size = 20),
#       panel.grid = element_blank(),
#       axis.text.x= element_text(color="#333333", size=14),
#       plot.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      panel.background = element_rect(fill ="#eae3dc", color=  "#eae3dc"),
#      axis.text.y=element_blank(),axis.ticks=element_blank(),
#      legend.background = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.key  = element_rect(fill = "#eae3dc", color=  "#eae3dc"),
#      legend.position = "bottom") +
scale_x_continuous(breaks = seq(0,5000000,1000000), limits=c(0,6000000),
labels = unit_format(unit = "MB", scale = 1e-6)) +
annotate(geom="text", x=0, y=0, label="Pseudomonas fluorescens SBW25",
fontface="bold.italic",size=4,color="gray") +
labs(x="",y="") +
geom_text(data = ticks, aes(x, y, label = "|", angle = angle))
install.packages('BioCircos')
library('BioCircos')
myGenome = list("A" = 6000000)
BioCircos(genome = myGenome, genomeFillColor = c("tomato2", "darkblue"),
genomeTicksScale = 4e+3)
BioCircos(genome = myGenome, yChr = FALSE, genomeFillColor = "Reds", chrPad = 0,
displayGenomeBorder = FALSE, genomeTicksDisplay = FALSE, genomeLabelDy = 0)
tracklist = BioCircosTextTrack('myTextTrack', 'Some text', size = "2em", opacity = 0.5,
x = -0.67, y = -0.5)
BioCircos(tracklist, genomeFillColor = "PuOr",
chrPad = 0, displayGenomeBorder = FALSE,
genomeTicksLen = 2, genomeTicksTextSize = 0, genomeTicksScale = 1e+8,
genomeLabelTextSize = "9pt", genomeLabelDy = 0)
tracklist = BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.5, maxRadius = 0.8,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#FFBBBB")
BioCircos(tracklist, genomeFillColor = "PuOr",
chrPad = 0.05, displayGenomeBorder = FALSE,
genomeTicksDisplay = FALSE,  genomeLabelTextSize = "9pt", genomeLabelDy = 0)
BioCircos(genome = myGenome, yChr = FALSE, genomeFillColor = "Reds", chrPad = 0,
displayGenomeBorder = FALSE, genomeTicksDisplay = FALSE, genomeLabelDy = 0)
tracklist = BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.5, maxRadius = 0.8,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#FFBBBB")
BioCircos(tracklist, genomeFillColor = "PuOr",
chrPad = 0.05, displayGenomeBorder = FALSE,
genomeTicksDisplay = FALSE,  genomeLabelTextSize = "9pt", genomeLabelDy = 0)
myBackgroundTrack = list("B"=6000000)
tracklist = BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.5, maxRadius = 0.8,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#FFBBBB")
BioCircos(tracklist, genomeFillColor = "PuOr",
chrPad = 0.05, displayGenomeBorder = FALSE,
genomeTicksDisplay = FALSE,  genomeLabelTextSize = "9pt", genomeLabelDy = 0)
check = list("B"=6000000)
BioCircos(genome = myGenome, yChr = FALSE, genomeFillColor = "Reds", chrPad = 0,
displayGenomeBorder = FALSE, genomeTicksDisplay = FALSE, genomeLabelDy = 0)
tracklist = BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.5, maxRadius = 0.8,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#FFBBBB")
BioCircos(tracklist, genomeFillColor = "PuOr",
chrPad = 0.05, displayGenomeBorder = FALSE,
genomeTicksDisplay = FALSE,  genomeLabelTextSize = "9pt", genomeLabelDy = 0)
random_values <- c(500:100)
random_sample <- sample(random_values,12)
random_sample
col.pal = c(Freebayes="red",Lofreq="green",Varscan="blue",BreseQ="grey")
check <- matrix(random_sample,nrow=4,
dimnames = list(c("Freebayes","Lofreq","Varscan", "BreseQ"),
c("breseq","BWA","Minimap")))
chordDiagram(check,grid.col = col.pal)
check
library(tidyverse)
df <- tibble(col1= c("a","a","k","k","k"), col2 = c("a1","a2","k1","k2","k3"),
distance = c(1,1,1,1,1),
count_col1=c(1,1,4,4,4), count_col2=c(3,4,1,1,1))
df
df %>%
group_by(col1) %>%
mutate(Max = pmax(count_col1, count_col2, na.rm = TRUE))
df %>%
mutate(Max = pmax(count_col1, count_col2, na.rm = TRUE))
df %>%
mutate(Max = pmax(count_col1, count_col2, na.rm = TRUE)) %>%
group_by(col1) %>%
mutate(Max=max(Max))
df %>%
mutate(Max = pmax(count_col1, count_col2, na.rm = TRUE)) %>%
group_by(col1)
df %>%
slice(which.max(count_col1,count_col2))
df
df1 <- tibble(col1= c("apple","apple","banana","banana"),
col2 = c("appl","aple","banan","bananb"),
distance = c(1,1,1,1),
count_col1=c(1,1,4,4), count_col2=c(3,4,1,1))
df1
df1 <- tibble(col1= c("apple","apple","banana","banana"),
col2 = c("appl","aple","banan","bananb"),
count_col1=c(1,1,4,4), count_col2=c(3,4,1,1))
df1
library(tidyverse)
<<<<<<< HEAD
library(palmerpenguins)
library(ggalluvial)
library(ggpubr)
library(magick)
library(patchwork)
library(munsell)
library(colorspace)
library(flair)
install.packages("flair")
library(flair)
library(flair)
(
penguins_lodes <-
penguins %>%
count(species, island, year, sex, name = "freq") %>%
rowid_to_column("alluvium") %>%
mutate(year = factor(year)) %>%
pivot_longer(
-c(alluvium, freq, species),
names_to = "variable", values_to = "stratum"
)
)
penguins %>%
count(species, island, year, sex, name = "freq")
penguins %>%
count(species, island, year, sex, name = "freq") %>%
rowid_to_column("alluvium")
test.df
test.df %>%
rowid_to_column("alluvium")
(
penguins_lodes <-
penguins %>%
count(species, island, year, sex, name = "freq") %>%
rowid_to_column("alluvium") %>%
mutate(year = factor(year)) %>%
pivot_longer(
-c(alluvium, freq, species),
names_to = "variable", values_to = "stratum"
)
)
test.df
test.df %>%
rowid_to_column("alluvium") %>%
ggplot() +
aes(x=Mappers,y=value,
stratum=SNP_caller, alluvium=alluvium, label=SNP_caller)+
geom_alluvium()
test.df %>%
rowid_to_column("alluvium") %>%
ggplot() +
aes(x=Mappers,y=value,
stratum=SNP_caller, alluvium=alluvium, label=SNP_caller)+
geom_alluvium(aes(fill=SNP_caller))
test.df %>%
rowid_to_column("alluvium") %>%
ggplot() +
aes(x=Mappers,y=value,
stratum=SNP_caller, alluvium=alluvium, label=SNP_caller)+
geom_alluvium(aes(fill=SNP_caller),
aes.bind="alluvia")
test.df %>%
rowid_to_column("alluvium") %>%
ggplot() +
aes(x=Mappers,y=value,
stratum=SNP_caller, alluvium=alluvium, label=SNP_caller)+
geom_alluvium(aes(fill=SNP_caller),
aes.bind = "alluvia",
colour = "darkgray",
reverse = FALSE)
test.df %>%
rowid_to_column("alluvium") %>%
ggplot() +
aes(x=Mappers,y=value,
stratum=SNP_caller, alluvium=alluvium, label=SNP_caller)+
geom_alluvium(aes(fill=SNP_caller),
aes.bind = "alluvia",
colour = "darkgray",
reverse = FALSE) +
geom_stratum(aes(fill = SNP_caller), reverse = FALSE)
test.df %>%
rowid_to_column("alluvium") %>%
ggplot() +
aes(x=Mappers,y=value,
stratum=SNP_caller, alluvium=alluvium, label=SNP_caller)+
geom_alluvium(aes(fill=SNP_caller),
aes.bind = "alluvia",
colour = "darkgray",
reverse = FALSE) +
geom_stratum(aes(fill = SNP_caller), reverse = FALSE) +
geom_text(stat = "stratum", reverse = FALSE) +
scale_x_discrete(expand = expansion(mult = .1))
test.df
penguins_lodes %>%
ggplot(
aes(
x = variable, y = freq,
stratum = stratum, alluvium = alluvium, label = stratum
)
)
penguins_lodes %>%
ggplot(
aes(
x = variable, y = freq,
stratum = stratum, alluvium = alluvium, label = stratum
)
) +
+
geom_alluvium(
aes(fill = species),
aes.bind = "alluvia", colour = "darkgray", reverse = FALSE
) +
geom_stratum(aes(fill = stratum), reverse = FALSE) +
geom_text(stat = "stratum", reverse = FALSE) +
scale_x_discrete(expand = expansion(mult = .1))
penguins_lodes %>%
ggplot(
aes(
x = variable, y = freq,
stratum = stratum, alluvium = alluvium, label = stratum
)
) +
geom_alluvium(
aes(fill = species),
aes.bind = "alluvia", colour = "darkgray", reverse = FALSE
) +
geom_stratum(aes(fill = stratum), reverse = FALSE) +
geom_text(stat = "stratum", reverse = FALSE) +
scale_x_discrete(expand = expansion(mult = .1))
penguins_lodes %>%
ggplot(
aes(
x = variable, y = freq,
stratum = stratum, alluvium = alluvium, label = stratum
)
) +
geom_alluvium(
aes(fill = species),
aes.bind = "alluvia", colour = "darkgray", reverse = FALSE
)
penguins_lodes
test.df
test.df %>%
pivot_longer(names_to = "program", values_to = "SNP" )
test.df %>%
pivot_longer(cols = 1:2, names_to = "program", values_to = "SNP" )
test.df %>%
pivot_longer(cols = 1:3, names_to = "program", values_to = "SNP" )
test.df %>%
pivot_longer(cols = 1:3, names_to = "program")
test.df %>%
pivot_longer(cols = 1:2, names_to = "program", values_to = "SNP" )
penguins_lodes
penguins_lodes
test.df %>%
pivot_longer(cols = 1:2, names_to = "program", values_to = "SNP" )
test.df %>%
pivot_longer(cols = 1:2, names_to = "stratum", values_to = "SNP" )
test.df %>%
pivot_longer(cols = 1:2, names_to = "stratum", values_to = "SNP_caller" )
test.df %>%
pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" )
penguins_lodes
test.df %>%
pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium")
test.df %>%
pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium")
penguins_lodes
test.df %>%
pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium")
test.df %>%
#pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium")
ggplot(aes(y=value, axis1=Mappers, axis2=SNP_caller)) +
geom_alluvium()
test.df %>%
#pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium") %>%
ggplot(aes(y=value, axis1=Mappers, axis2=SNP_caller)) +
geom_alluvium()
test.df %>%
#pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium") %>%
ggplot(aes(y=value, axis1=Mappers, axis2=SNP_caller)) +
geom_alluvium(aes(fill=value))
test.df %>%
#pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium") %>%
ggplot(aes(y=value, axis1=Mappers, axis2=SNP_caller)) +
geom_alluvium(aes(fill=value)) +
geom_stratum(width = 1/12, fill = "black", color = "grey")
test.df %>%
#pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium")
ggplot(aes(y=value, axis1=Mappers, axis2=SNP_caller)) +
geom_alluvium(aes(fill=value)) +
geom_stratum(width = 1/12, fill = "black", color = "grey") +
geom_label(stat = "stratum", aes(label = after_stat(stratum)))
test.df %>%
#pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium") %>%
ggplot(aes(y=value, axis1=Mappers, axis2=SNP_caller)) +
geom_alluvium(aes(fill=value)) +
geom_stratum(width = 1/12, fill = "black", color = "grey") +
geom_label(stat = "stratum", aes(label = after_stat(stratum)))
test.df %>%
#pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium") %>%
ggplot(aes(y=value, axis1=Mappers, axis2=SNP_caller)) +
geom_alluvium(aes(fill=value)) +
geom_stratum(width = 1/12, fill = "black", color = "grey") +
geom_label(stat = "stratum", aes(label = after_stat(stratum)))  +
scale_x_discrete(limits = c("Gender", "Dept"), expand = c(.05, .05))
test.df %>%
#pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium") %>%
ggplot(aes(y=value, axis1=Mappers, axis2=SNP_caller)) +
geom_alluvium(aes(fill=value)) +
geom_stratum(width = 1/12, fill = "black", color = "grey") +
geom_label(stat = "stratum", aes(label = after_stat(stratum)))  +
scale_x_discrete(limits = c("Gender", "Dept"), expand = c(.05, .05))  +
scale_fill_brewer(type = "qual", palette = "Set1")
test.df %>%
#pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium") %>%
ggplot(aes(y=value, axis1=Mappers, axis2=SNP_caller)) +
geom_alluvium(aes(fill=value)) +
geom_stratum(width = 1/12, fill = "black", color = "grey") +
geom_label(stat = "stratum", aes(label = after_stat(stratum)))  +
scale_x_discrete(limits = c("Gender", "Dept"), expand = c(.05, .05))  +
ggtitle("UC Berkeley admissions and rejections, by sex and department")
test.df %>%
#pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium") %>%
ggplot(aes(y=value, axis1=Mappers, axis2=SNP_caller)) +
geom_alluvium(aes(fill=value)) +
geom_stratum(width = 1/12, fill = "black", color = "grey") +
geom_label(stat = "stratum", aes(label = after_stat(stratum)))  +
scale_x_discrete(limits = c("Mappers", "SNP callers"), expand = c(.05, .05))  +
ggtitle("UC Berkeley admissions and rejections, by sex and department")
test.df %>%
#pivot_longer(cols = 1:2, names_to = "stratum", values_to = "program" ) %>%
rowid_to_column("alluvium") %>%
ggplot(aes(y=value, axis1=Mappers, axis2=SNP_caller)) +
geom_alluvium(aes(fill=value)) +
geom_stratum(width = 1/12, fill = "black", color = "grey") +
geom_label(stat = "stratum", aes(label = after_stat(stratum)))  +
scale_x_discrete(limits = c("Mappers", "SNP callers"), expand = c(.05, .05))  +
ggtitle("Amount of SNPs that is called from combination of SNP callers and Mappers")
library(tidyverse)
airmen_raw <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-08/airmen.csv")
airmen_raw %>% count(pilot_type)
airmen_raw
airmen_raw %>%
kableExtra::kable()
airmen_raw %>%
kableExtra::kbl()
# fix spelling error
airmen_raw <- airmen_raw %>%
mutate(pilot_type = str_replace(pilot_type, "Liason", "Liaison"))
airmen %>%
ggplot(., aes(pilot_type,fill=rank_at_graduation)) +
geom_bar(stat="count")
airmen_raw <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-08/airmen.csv")
airmen_raw %>% count(pilot_type)
airmen_raw %>%
kableExtra::kbl()
# fix spelling error
airmen <- airmen_raw %>%
mutate(pilot_type = str_replace(pilot_type, "Liason", "Liaison"))
airmen %>%
ggplot(., aes(pilot_type,fill=rank_at_graduation)) +
geom_bar(stat="count")
library(infer)
aircraft <- c("Single engine", "Twin engine")
ranks <- c("Flight Officer", "2nd Lt")
pilot_vs_rank <-
airmen %>%
filter(pilot_type %in% aircraft, rank_at_graduation %in% ranks) %>%
specify(pilot_type ~ rank_at_graduation, success = "Twin engine")
pilot_vs_rank
set.seed(123)
bootstrapped <-
pilot_vs_rank %>%
generate(reps = 1000, type = "bootstrap")
bootstrapped
set.seed(234)
permuted <-
pilot_vs_rank %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute")
permuted
pilot_vs_rank
pilot_vs_rank
observed <-
pilot_vs_rank %>%
calculate(stat = "chisq", order = ranks)
observed
pilot_vs_rank
airmen_chisq <-
bootstrapped %>%
calculate(stat = "chisq", order = ranks)
get_ci(airmen_chisq)
airmen_chisq
get_ci(airmen_chisq)
visualize(airmen_chisq) +
shade_ci(
endpoints = get_ci(airmen_chisq),
fill = "midnightblue",
color = "midnightblue",
lty = 2
)
=======
df1 <- tibble(col1= c("apple","apple","banana","banana"),
col2 = c("appl","aple","banan","bananb"),
count_col1=c(1,1,4,4), count_col2=c(3,4,1,1))
df1
reprex()
library(reprex)
reprex()
library(tidyverse)
df1 <- tibble(col1= c("apple","apple","banana","banana"),
col2 = c("appl","aple","banan","bananb"),
count_col1=c(1,1,4,4), count_col2=c(3,4,1,1))
df1
reprex()
df1 %>%
mutate(Max = pmax(count_col1, count_col2) ) %>%
group_by(col1) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max)
filter(Max == max(Max))
filter(Max == max(Max))
select(-Max)
df1
df1 %>%
df1 %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
group_by(col1) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max)
df1 %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
group_by(col1) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max)
df1 %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
group_by(col1) %>%
filter(Max == max(Max))
df1 %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
group_by(col1) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max)
df1
df1
df1 <- tibble(col1= c("apple","apple","banana","banana","banana"),
col2 = c("appl","aple","banan","bananb"),
count_col1=c(1,1,4,4), count_col2=c(3,4,1,1))
df1 <- tibble(col1= c("apple","apple","banana","banana","banana"),
col2 = c("appl","aple","banan","bananb","banat"),
count_col1=c(1,1,4,4,4), count_col2=c(3,4,1,1,1))
df1
df2 <- tibble(col1= c("apple","apple","banana","banana","banana"),
col2 = c("appl","aple","banan","bananb","banat"),
count_col1=c(1,1,4,4,4), count_col2=c(3,4,1,1,1))
df2
df2
df2 %>%
group_by(col1) %>%
summarise(starts_with("count"), sum)
df2 %>%
group_by(col1) %>%
summarise(starts_with("count"), list(sum))
df2 %>%
group_by(col1) %>%
summarise(starts_with(count), list(sum))
df2 %>%
group_by(col1) %>%
summarise_at(vars(starts_with("count")), list(sum))
reprex()
reprex()
df2 %>%
group_by(col1) %>%
mutate(sum_col2=summarise_at(vars(starts_with("count")), list(sum)))
df2 %>%
group_by(col1) %>%
mutate(sum_col2= summarise_at(vars(count_col2), list(sum)))
df2
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2)))
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2))
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2))  %>%
mutate(Max = pmax(count_col1, count_col2))
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2))  %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max)
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2))  %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max) %>%
mutate(all_sum= sum(sum_col2 + count_col1))
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2))  %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max) %>%
mutate(all_sum= sum(sum_col2, count_col1))
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2))  %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max)
mutate(all_sum= sum(c_across(sum_col2, count_col1)))
mutate(all_sum= sum(c_across(c(sum_col2, count_col1))))
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2))  %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max) %>%
mutate(all_sum= sum(c_across(c(sum_col2, count_col1))))
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2))  %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max) %>%
group_by(col1) %>%
mutate(all_sum= sum(c_across(c(sum_col2, count_col1))))
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2))  %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max) %>%
group_by(col1) %>%
mutate(all_sum= rowSums(c_across(c(sum_col2, count_col1))))
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2))  %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max) %>%
group_by(col1) %>%
mutate(all_sum= rowSums(across(sum_col2, count_col1)))
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2))  %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max) %>%
mutate(all_sum= rowSums(across(sum_col2, count_col1)))
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2))  %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max) %>%
mutate(all_sum= rowSums(across(sum_col2, count_col1)))
df2 %>%
group_by(col1) %>%
mutate(sum_col2=sum(count_col2))  %>%
mutate(Max = pmax(count_col1, count_col2)) %>%
filter(Max == max(Max)) %>%
ungroup %>%
select(-Max) %>%
rowwise() %>%
mutate(all_sum= sum(c_across(c(sum_col2, count_col1))))
df3 <- tibble(col1 = c("apple",rep("banana",3)),
col2 = c("aple", "banan","bananb","banat"),
count_col1 = c(1,4,4,4,),
count_col2 = c(4,1,1,1))
df3 <- tibble(col1 = c("apple",rep("banana",3)),
col2 = c("aple", "banan","bananb","banat"),
count_col1 = c(1,4,4,4),
count_col2 = c(4,1,1,1))
df3
reprex()
df3 %>%
group_by(col1) %>%
mutate(case_when(count_col2 > count_col1 ~  col1==NA,
TRUE ~ 0 ))
reprex()
>>>>>>> 7e8fbd37c0568f3785de6e949aa12159fdcba29e
